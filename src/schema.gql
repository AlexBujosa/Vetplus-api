# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CreatedUserResponse {
  result: String!
  message: String!
}

type SignUpResponse {
  result: String!
  message: String!
}

type SignInResponse {
  access_token: String
}

type SignUpVerificationCode {
  room: String!
}

type User {
  id: String!
  names: String!
  surnames: String
  email: String!
  provider: String!
  document: String
  address: String
  telephone_number: String
  image: String
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UpdateUserResponse {
  result: String!
}

type SaveUserImageResponse {
  result: String!
  image: String
}

type DeleteUserImageResponse {
  result: String!
}

type GeneralResponse {
  result: String!
}

type UserFmc {
  id_user: String!
  token_fmc: String!
}

type UserProfile {
  id: String!
  names: String!
  surnames: String
  email: String!
  provider: String!
  document: String
  address: String
  telephone_number: String
  image: String
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  User_Fmc: UserFmc
}

type Credentials {
  id_user: String!
  password: String!
  Status: Boolean!
}

type VerificationCode {
  room: String!
}

type RecoveryAccount {
  access_token: String
}

type CredentialsResponse {
  result: String!
}

type Notification {
  id: String!
  id_user: String!
  title: String!
  subtitle: String!
  category: String!
  read: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type NotificationResponse {
  result: String!
}

type NotificationAD {
  id: String
  id_pet: String
}

type NotificationInvitation {
  id: String
  id_owner: String
  id_clinic: String
}

type AllNotification {
  id: String!
  id_user: String!
  title: String!
  subtitle: String!
  category: String!
  read: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  notificationInvitation: NotificationInvitation
  notificationAD: NotificationAD
}

type AddPetResponse {
  result: String!
}

type UpdatePetResponse {
  result: String!
}

type DeletePetResponse {
  result: String!
}

type Pet {
  id: String!
  id_owner: String!
  id_specie: Int!
  id_breed: Int!
  name: String!
  image: String
  gender: String!
  castrated: Boolean!
  dob: DateTime
  observations: String
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type SavePetImageResponse {
  result: String!
  image: String
}

type DeletePetImageResponse {
  result: String!
}

type AddSpecieResponse {
  result: String!
}

type Specie {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type AddBreedResponse {
  result: String!
}

type Breed {
  id: Int!
  id_specie: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type WorkingDays {
  day: String!
  startTime: String!
  endTime: String!
}

type Schedule {
  workingDays: [WorkingDays!]!
  nonWorkingDays: [String!]!
}

type ClinicResponse {
  result: String!
}

type ClinicServiceResult {
  services: [String!]
}

type ClinicInfo {
  name: String!
  address: String!
  image: String
}

type FavoriteClinicResult {
  Clinic: ClinicInfo!
  id_user: String!
  id_clinic: String!
  favorite: Boolean!
  points: Int
}

type ScoreClinicResponse {
  result: String!
}

type ClinicSummaryScore {
  total_points: Int!
  total_users: Int!
}

type Clinic {
  id: String!
  id_owner: String!
  name: String!
  telephone_number: String!
  google_maps_url: String
  email: String
  image: String
  address: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type GetAllClinic {
  id: String!
  id_owner: String!
  name: String!
  telephone_number: String!
  google_maps_url: String
  email: String
  image: String
  address: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  services: [String!]
  ClinicSummaryScore: ClinicSummaryScore!
}

type AppointmentSchedule {
  start_at: DateTime!
  end_at: DateTime
}

type PetBreed {
  id: String!
  id_owner: String!
  id_specie: Int!
  id_breed: Int!
  name: String!
  image: String
  gender: String!
  castrated: Boolean!
  dob: DateTime
  observations: String
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Breed: Breed!
}

type GetAllClients {
  id: String!
  names: String!
  surnames: String
  email: String!
  provider: String!
  document: String
  address: String
  telephone_number: String
  image: String
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Pet: [PetBreed!]!
  AppointmentOwner: [AppointmentSchedule!]!
}

type GetAllClientsResult {
  id_user: String!
  id_clinic: String!
  favorite: Boolean!
  points: Int
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  User: GetAllClients
}

type GetClinicResult {
  id: String!
  id_owner: String!
  name: String!
  telephone_number: String!
  google_maps_url: String
  email: String
  image: String
  address: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  services: [String!]
  ClinicSummaryScore: ClinicSummaryScore!
  schedule: Schedule
}

type SaveClinicImageResponse {
  result: String!
  image: String
}

type DeleteClinicImageResponse {
  result: String!
}

type AddProcedureResponse {
  result: String!
}

type Procedure {
  id: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type UpdateProcedureResponse {
  result: String!
}

type GetAllProcedureByClinicId {
  services: [String!]!
}

type EmployeeResponse {
  result: String!
}

type HandleRequestResult {
  access_token: String
}

type VeterinarianSummaryScore {
  total_points: Int!
  total_users: Int!
}

type VeterinarianSpecialties {
  specialties: String
}

type Employee {
  VeterinarianSummaryScore: VeterinarianSummaryScore!
  VeterinariaSpecialties: VeterinarianSpecialties
  names: String!
  surnames: String
  image: String
  email: String!
  status: Boolean!
}

type GetAllEmployeeResult {
  id_clinic: String!
  id_employee: String!
  employee_invitation_status: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Employee: Employee!
}

type GetEmployeesFromClinic {
  VeterinarianSummaryScore: VeterinarianSummaryScore!
  VeterinariaSpecialties: VeterinarianSpecialties
  names: String!
  surnames: String
  image: String
  email: String!
  status: Boolean!
  address: String
  telephone_number: String
}

type GetMyEmployee {
  id_clinic: String!
  id_employee: String!
  employee_invitation_status: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Employee: GetEmployeesFromClinic!
}

type GetMyEmployeesResult {
  ClinicEmployees: [GetMyEmployee!]
}

type CommentResponse {
  result: String!
}

type UserClinicPoint {
  points: Int
}

type CommentOwner {
  names: String!
  surnames: String
  image: String
  ClinicUsers: [UserClinicPoint!]
}

type GetAllCommentByIdClinic {
  id: String!
  id_clinic: String!
  id_owner: String!
  comment: String!
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Owner: CommentOwner!
}

type AppointmentResponse {
  result: String!
}

type Appointment {
  start_at: DateTime!
  end_at: DateTime
  id: String!
  id_owner: String!
  id_veterinarian: String!
  id_pet: String!
  services: [String!]!
  id_clinic: String!
  observations: String
  appointment_status: String
  state: String
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
}

type AppointmentHistory {
  start_at: DateTime!
  end_at: DateTime
  id: String!
  id_owner: String!
  id_veterinarian: String!
  id_pet: String!
  services: [String!]!
  id_clinic: String!
  observations: String
  appointment_status: String
  state: String
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Clinic: Clinic
  Pet: Pet
  Veterinarian: User
  Owner: User
}

type AppointmentVerified {
  start_at: DateTime!
  end_at: DateTime
  id: String!
  id_owner: String!
  id_veterinarian: String!
  id_pet: String!
  services: [String!]!
  id_clinic: String!
  observations: String
  appointment_status: String
  state: String
  created_at: DateTime!
  updated_at: DateTime!
  status: Boolean!
  Owner: User
}

type Query {
  signInWithEmail(signInInput: SignInInput!): SignInResponse!
  googleLogin: SignInResponse!
  findUserById: User!
  getMyProfile: UserProfile!
  findAll: [User!]!
  findCredentialsById: Credentials!
  getAllNotification: [Notification!]!
  getMyPets: [Pet!]!
  findAllPet: [Pet!]!
  getAllBreed: [Breed!]!
  getMyClinic: GetClinicResult!
  getAllClinic: [GetAllClinic!]!
  getClinicById(getClinicByIdInput: GenericByIdInput!): GetClinicResult!
  getAllClinicServices(genericByIdInput: GenericByIdInput!): ClinicServiceResult!
  getAllFavoriteClinic: [FavoriteClinicResult!]!
  getAllClients: [GetAllClientsResult!]!
  getAllProcedure: [Procedure!]!
  getAllProcedureByIdClinic(genericByIdInput: GenericByIdInput!): GetAllProcedureByClinicId!
  getAllEmployee(getAllEmployeeByClinicIdInput: GetAllEmployeeByClinicIdInput!): [GetAllEmployeeResult!]!
  getMyEmployees: GetMyEmployeesResult!
  getMyEmployee(genericByIdInput: GenericByIdInput!): GetMyEmployeesResult!
  getAllCommentByIdClinic(genericByIdInput: GenericByIdInput!): [GetAllCommentByIdClinic!]!
  getMyComments: [GetAllCommentByIdClinic!]!
  getAppointmentPerPetClinicOwners(filterAppointmentByIdInput: FilterAppointmentByIdInput!): [AppointmentHistory!]!
  getAppointmentPerPet(filterAppointmentByIdInput: FilterAppointmentByIdInput!): [AppointmentHistory!]!
  getAppointmentDetailClinicOwner(filterAppointmentBySSInput: FilterAppointmentBySSInput!): [AppointmentHistory!]!
  getAppointmentDetailAllRoles(filterAppointmentBySSInput: FilterAppointmentBySSInput!): [AppointmentHistory!]!
  getAppointmentPerRangeDateTime(filterAppointmentByDateRangeInput: FilterAppointmentByDateRangeInput!): [Appointment!]!
  getAppointmentsVerified(filterAppointmentByDateRangeInput: FilterAppointmentByDateRangeInput!): [AppointmentVerified!]!
}

input SignInInput {
  email: String!
  password: String!
}

input GenericByIdInput {
  id: String!
}

input GetAllEmployeeByClinicIdInput {
  id: String!
}

input FilterAppointmentByIdInput {
  id: String!
  state: String
}

input FilterAppointmentBySSInput {
  state: String
  appointment_status: String
}

input FilterAppointmentByDateRangeInput {
  start_at: DateTime
  end_at: DateTime
}

type Mutation {
  signUp(verificationCodeInput: VerificationCodeInput!): SignUpResponse!
  signUpVerificationCode(signUpInput: SignUpInput!): SignUpVerificationCode!
  googleRegister(signUpInput: SignUpInput!): SignInResponse!
  createUser(createUserInput: CreateUserInput!): CreatedUserResponse!
  updateUser(updateUserInput: UpdateUserInput!): UpdateUserResponse!
  saveUserImage(saveUserImageInput: SaveUserImageInput!): SaveUserImageResponse!
  deleteUserImage(deleteUserImageInput: DeleteUserImageInput!): DeleteUserImageResponse!
  registerFMC(registerFmcInput: RegisterFmcInput!): GeneralResponse!
  recoveryPasswordSendVerificationCode(recoveryCredentialsInput: RecoveryCredentialsInput!): VerificationCode!
  recoveryAccount(verificationCodeInput: VerificationCodeInput!): RecoveryAccount!
  updateCredentialsRecoveryAccount(updateCredentialsRecoveryAccountInput: UpdateCredentialsRecoveryAccountInput!): CredentialsResponse!
  updateCredentials(updateCredentialsInput: UpdateCredentialsInput!): CredentialsResponse!
  markNotificationAsRead(markNotificationAsReadInput: MarkNotificationAsReadInput!): NotificationResponse!
  deletePetImage(deletePetImageInput: DeletePetImageInput!): DeletePetImageResponse!
  savePetImage(savePetImageInput: SavePetImageInput!): SavePetImageResponse!
  registerPet(addPetInput: AddPetInput!): AddPetResponse!
  updatePet(updatePetInput: UpdatePetInput!): UpdatePetResponse!
  deletePet(deletePetInput: DeletePetInput!): DeletePetResponse!
  registerSpecie(addPetInput: AddSpecieInput!): AddSpecieResponse!
  registerBreed(addBreedInput: AddBreedInput!): AddBreedResponse!
  registerClinic(addClinicInput: AddClinicInput!): ClinicResponse!
  updateClinic(updateClinicInput: UpdateClinicInput!): ClinicResponse!
  saveClinicImage(saveClinicImageInput: SaveClinicImageInput!): SaveClinicImageResponse!
  deleteClinicImage(deleteClinicImageInput: DeleteClinicImageInput!): DeleteClinicImageResponse!
  changeClinicStatus(turnClinicStatusInput: TurnClinicStatusInput!): ClinicResponse!
  markAsFavoriteClinic(markAsFavoriteClinicInput: MarkAsFavoriteClinicInput!): ClinicResponse!
  scoreClinic(scoreClinicInput: ScoreClinicInput!): ScoreClinicResponse!
  registerProcedure(addProcedureInput: AddProcedureInput!): AddProcedureResponse!
  updateProcedure(updateProcedureInput: UpdateProcedureInput!): UpdateProcedureResponse!
  registerSpecialty(addSpecialtyInput: AddSpecialtyInput!): EmployeeResponse!
  changeEmployeeStatus(turnEmployeeStatusInput: TurnEmployeeStatusInput!): EmployeeResponse!
  inviteToClinic(inviteToClinicInput: InviteToClinicInput!): EmployeeResponse!
  handleEmployeeRequest(handleEmployeeRequestInput: HandleEmployeeRequestInput!): HandleRequestResult!
  scoreVeterinarian(scoreVeterinarianInput: ScoreVeterinarianInput!): EmployeeResponse!
  registerComment(addCommentInput: AddCommentInput!): CommentResponse!
  deleteComment(deleteCommentInput: DeleteCommentInput!): CommentResponse!
  scheduleAppoinment(scheduleAppointmentInput: ScheduleAppointmentInput!): AppointmentResponse!
  respondToAppointment(updateAppointmentInput: UpdateAppointmentInput!): AppointmentResponse!
  updateAppointmentResumen(updateAppointmentResumenInput: UpdateAppointmentResumenInput!): AppointmentResponse!
  sendMessage(messageInput: MessageInput!): GeneralResponse!
}

input VerificationCodeInput {
  verificationCode: Int!
  room: String!
}

input SignUpInput {
  names: String!
  surnames: String
  email: String!
  password: String
  provider: String
}

input CreateUserInput {
  names: String!
  surnames: String
  email: String!
  password: String
  provider: String
}

input UpdateUserInput {
  names: String!
  surnames: String
  document: String
  address: String
  telephone_number: String
  image: String
}

input SaveUserImageInput {
  image: Upload!
  old_image: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DeleteUserImageInput {
  image: String!
}

input RegisterFmcInput {
  token_fmc: String!
}

input RecoveryCredentialsInput {
  email: String!
}

input UpdateCredentialsRecoveryAccountInput {
  password: String!
}

input UpdateCredentialsInput {
  old_password: String!
  password: String!
}

input MarkNotificationAsReadInput {
  id: String!
}

input DeletePetImageInput {
  image: String!
}

input SavePetImageInput {
  image: Upload!
  old_image: String
}

input AddPetInput {
  id_specie: Int!
  id_breed: Int!
  name: String!
  image: String
  gender: String!
  castrated: Boolean!
  dob: DateTime
  observations: String
}

input UpdatePetInput {
  id: String!
  id_specie: Int!
  id_breed: Int!
  name: String!
  url_current_image: String
  url_new_image: String
  gender: String!
  castrated: Boolean!
  dob: DateTime
  observations: String
}

input DeletePetInput {
  id: String!
  status: Boolean!
}

input AddSpecieInput {
  name: String!
}

input AddBreedInput {
  id_specie: Int!
  name: String!
}

input AddClinicInput {
  name: String!
  telephone_number: String!
  google_maps_url: String
  email: String
  image: String
  address: String!
}

input UpdateClinicInput {
  name: String
  telephone_number: String
  google_maps_url: String
  email: String
  image: String
  schedule: ScheduleInput
  address: String
  services: [String!]
}

input ScheduleInput {
  nonWorkingDays: [String!]!
  workingDays: [WorkingDaysInput!]!
}

input WorkingDaysInput {
  day: String!
  startTime: String!
  endTime: String!
}

input SaveClinicImageInput {
  image: Upload!
  old_image: String
}

input DeleteClinicImageInput {
  image: String!
}

input TurnClinicStatusInput {
  status: Boolean!
}

input MarkAsFavoriteClinicInput {
  id: String!
  favorite: Boolean!
}

input ScoreClinicInput {
  id_clinic: String!
  score: Float
}

input AddProcedureInput {
  name: String!
}

input UpdateProcedureInput {
  name: String!
  id: String!
}

input AddSpecialtyInput {
  specialties: String
}

input TurnEmployeeStatusInput {
  id: String!
  id_employee: String!
  status: Boolean!
}

input InviteToClinicInput {
  id: String!
  email: String!
  employee_invitation_status: String
}

input HandleEmployeeRequestInput {
  id: String!
  employee_invitation_status: String!
}

input ScoreVeterinarianInput {
  id_appointment: String!
  id_veterinarian: String!
  points: Int
}

input AddCommentInput {
  id: String!
  comment: String!
}

input DeleteCommentInput {
  id: String!
  id_clinic: String!
}

input ScheduleAppointmentInput {
  id_veterinarian: String!
  id_pet: String!
  services: [String!]!
  id_clinic: String!
  start_at: DateTime!
  end_at: DateTime
}

input UpdateAppointmentInput {
  id: String!
  appointment_status: String
  end_at: DateTime
}

input UpdateAppointmentResumenInput {
  id: String!
  id_clinic: String!
  id_owner: String!
  observations: String
}

input MessageInput {
  token: String!
  body: String!
}

type Subscription {
  getNewNotification: AllNotification!
}